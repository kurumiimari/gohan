package txscript

import (
	"fmt"
	"github.com/kurumiimari/gohan/chain"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestEngineExecution(t *testing.T) {
	t.Parallel()

	preimage := []byte("hunter2")
	digest := blake160(preimage)
	hashLock, err := NewScriptBuilder().
		AddOp(OP_BLAKE160).
		AddData(digest).
		AddOp(OP_EQUAL).
		Script()
	require.NoError(t, err)

	hip1Lock, err := NewHIP1LockingScript([]byte{
		0x02, 0xa3, 0x76, 0x61, 0xb7, 0x32, 0xb2, 0xfc,
		0x99, 0x12, 0x88, 0xb1, 0x91, 0xff, 0x49, 0x14,
		0x92, 0x7d, 0xea, 0x8f, 0x2c, 0x04, 0x86, 0x10,
		0xa5, 0xda, 0x37, 0x21, 0x2f, 0xab, 0xcb, 0x70,
		0x70,
	})
	require.NoError(t, err)

	hip1ValidSpend := &chain.Transaction{
		Inputs: []*chain.Input{
			{
				Prevout: &chain.Outpoint{
					Hash: []byte{
						0x5c, 0x34, 0x13, 0x80, 0x9a, 0x8c, 0xb4, 0x0c,
						0xcc, 0x21, 0x36, 0x06, 0xdb, 0x31, 0x6a, 0x4f,
						0x2e, 0x55, 0x1c, 0x2f, 0x04, 0x7c, 0x66, 0x4e,
						0xd8, 0xcd, 0xe3, 0x69, 0x9e, 0x95, 0x0d, 0xab,
					},
					Index: 0,
				},
				Sequence: chain.DefaultSequence,
			},
			{
				Prevout: &chain.Outpoint{
					Hash: []byte{
						0x98, 0x02, 0x1b, 0xf3, 0xf3, 0x6c, 0x98, 0xdf,
						0xe1, 0xa7, 0x48, 0x58, 0xfc, 0x8c, 0xe5, 0x28,
						0x4a, 0x46, 0x24, 0xe5, 0xef, 0xf1, 0x27, 0xdc,
						0x55, 0xef, 0xb9, 0x7a, 0x33, 0x2c, 0x9d, 0xba,
					},
					Index: 0,
				},
				Sequence: chain.DefaultSequence,
			},
		},
		Outputs: []*chain.Output{
			{
				Value:   4000000,
				Address: chain.MustAddressFromBech32("hs1qq6z6dvr0rra38h0jtpjk20vkpx4avl0qttg705ktgx337y9qwmqsn68h23"),
				Covenant: &chain.Covenant{
					Type: chain.CovenantTransfer,
					Items: [][]byte{
						{
							0x92, 0x29, 0x5c, 0x9c, 0x97, 0xd0, 0xfa, 0x3d,
							0x4b, 0xec, 0x4a, 0x14, 0xc0, 0x14, 0xbe, 0x14,
							0x78, 0x47, 0x63, 0xde, 0xb3, 0xd4, 0x39, 0x59,
							0xfc, 0xf7, 0x68, 0x85, 0x57, 0x4a, 0xd7, 0x6e,
						},
						{
							0xa9, 0x0f, 0x00, 0x00,
						},
						{
							0x00,
						},
						{
							0x4c, 0x55, 0x60, 0x62, 0xd2, 0x08, 0xa8, 0xc4,
							0x25, 0x23, 0xb3, 0xb3, 0x1d, 0xd9, 0xf6, 0xca,
							0x53, 0x6a, 0x03, 0x6a,
						},
					},
				},
			},
			{
				Value:    989998385,
				Address:  chain.MustAddressFromBech32("hs1qduagp36pgn2sjrt8v5eyk6gc0w4ntmzr93wy44"),
				Covenant: chain.EmptyCovenant,
			},
			{
				Value:    10000000,
				Address:  chain.MustAddressFromBech32("hs1qwfsfpczn5vy6063clkxzwclhlxtfmkd6msumz4"),
				Covenant: chain.EmptyCovenant,
			},
		},
		Witnesses: []*chain.Witness{
			{
				Items: [][]byte{
					{
						0xe6, 0xbd, 0x9a, 0x0b, 0x89, 0x86, 0x13, 0xec,
						0x23, 0xda, 0x5d, 0xc8, 0xd6, 0x02, 0x0f, 0x07,
						0x98, 0x15, 0xf7, 0x03, 0xa1, 0x11, 0xdd, 0x76,
						0x83, 0x2f, 0xe9, 0x97, 0x6e, 0x1c, 0x0b, 0x38,
						0x52, 0x96, 0x99, 0xdf, 0x83, 0x91, 0x69, 0xa4,
						0x5b, 0xee, 0x1a, 0x9b, 0xa2, 0x39, 0xb2, 0xbe,
						0xa8, 0x5d, 0xce, 0xc4, 0x76, 0xa4, 0x12, 0x37,
						0xb9, 0x3e, 0x71, 0xbe, 0x40, 0xe8, 0xf7, 0x5e,
						0x84,
					},
					{
						0xd0, 0x59, 0x87, 0x63, 0x21, 0x02, 0xeb, 0x11,
						0x06, 0x7e, 0xd5, 0xc4, 0x66, 0x95, 0x52, 0xc8,
						0x7e, 0x12, 0xdd, 0xcd, 0xb1, 0xfa, 0x1f, 0x76,
						0x64, 0x3d, 0xdc, 0x80, 0xcb, 0x69, 0x40, 0x7c,
						0xb7, 0x2a, 0xa1, 0x42, 0xc2, 0x7a, 0xac, 0x67,
						0xd0, 0x5a, 0x87, 0x68,
					},
				},
			},
			{
				Items: [][]byte{
					{
						0x2b, 0x14, 0xea, 0xee, 0x4e, 0xfd, 0x27, 0x36,
						0xfb, 0x64, 0xee, 0xd3, 0xec, 0xce, 0x35, 0x91,
						0xc5, 0x8b, 0x0e, 0x03, 0x56, 0xb7, 0xf5, 0xeb,
						0x13, 0xa7, 0x03, 0xc7, 0xd3, 0x86, 0x63, 0xad,
						0x38, 0x1e, 0x78, 0x4d, 0x63, 0xad, 0x9b, 0xa8,
						0xa2, 0x49, 0x89, 0x5d, 0x0d, 0x72, 0xdb, 0x7b,
						0x59, 0x87, 0x9b, 0xda, 0x5a, 0x9d, 0x01, 0xdf,
						0xc7, 0x79, 0xe5, 0x8f, 0x88, 0x24, 0xbc, 0xcb,
						0x01,
					},
					{
						0x02, 0x0f, 0x8c, 0x31, 0x2a, 0x4c, 0x28, 0x0d,
						0x04, 0xcc, 0x98, 0x89, 0xfd, 0x82, 0xc3, 0x8d,
						0x5f, 0x69, 0x27, 0x30, 0x49, 0x84, 0xed, 0xe3,
						0xd4, 0xf3, 0xc7, 0x76, 0xe9, 0xcf, 0xdf, 0x93,
						0x60,
					},
				},
			},
		},
	}

	tests := []struct {
		name         string
		tx           *chain.Transaction
		inputAddress *chain.Address
		inputAmount  uint64
		idx          int
		err          string
	}{
		{
			"valid p2pkh",
			&chain.Transaction{
				Inputs: []*chain.Input{
					{
						Prevout: &chain.Outpoint{
							Hash: []byte{
								0x2b, 0xe0, 0x3e, 0x21, 0x2d, 0x32, 0xf6, 0xe5,
								0xec, 0x07, 0x3c, 0x0b, 0x87, 0x4d, 0xbe, 0xa1,
								0x65, 0x4e, 0xf5, 0x45, 0x53, 0x4e, 0x3a, 0x12,
								0x67, 0x8b, 0xeb, 0x5b, 0x1d, 0xb0, 0xa0, 0x6b,
							},
							Index: 0,
						},
						Sequence: chain.DefaultSequence,
					},
				},
				Outputs: []*chain.Output{
					{
						Value:   0,
						Address: chain.MustAddressFromBech32("rs1qk6pglpxj9xxwhscqlg3yp797n9gne8j8rfuwsz"),
						Covenant: &chain.Covenant{
							Type: chain.CovenantOpen,
							Items: [][]byte{
								{
									0x4b, 0x5f, 0x40, 0x4f, 0x7e, 0x9c, 0xcf, 0xe0, 0xb4,
									0x7c, 0x32, 0xd4, 0x35, 0x17, 0x7b, 0xec, 0xa1, 0xed,
									0x3d, 0x8d, 0x8c, 0x7a, 0x3a, 0xa6, 0xd0, 0x80, 0xb6,
									0xaf, 0xcb, 0xe7, 0x21, 0x49,
								},
								make([]byte, 4),
								{
									0x78, 0x70, 0x6e, 0x6a, 0x73, 0x65, 0x67, 0x61, 0x65, 0x70,
								},
							},
						},
					},
					{
						Value:    1999996220,
						Address:  chain.MustAddressFromBech32("rs1q3dnzyz9kamtcej877a90jrcnh5jr3wm7zgzrw7"),
						Covenant: chain.EmptyCovenant,
					},
				},
				Witnesses: []*chain.Witness{
					{
						Items: [][]byte{
							{
								0x08, 0x98, 0xb4, 0xe5, 0xcb, 0xac, 0x14, 0x0d,
								0x65, 0xae, 0xe2, 0xba, 0x7c, 0x91, 0x14, 0x5b,
								0x05, 0xcd, 0xf5, 0x10, 0x7a, 0x5a, 0xff, 0x5b,
								0xc9, 0x0d, 0x27, 0x12, 0x49, 0x93, 0x0a, 0x67,
								0x4f, 0xca, 0x3f, 0x52, 0x06, 0x64, 0xce, 0x25,
								0x8a, 0x56, 0xc3, 0x8b, 0xe4, 0xb3, 0x7f, 0x8e,
								0xa5, 0xdb, 0x9b, 0x36, 0x13, 0xad, 0x42, 0x72,
								0x8d, 0xf3, 0xd5, 0x6d, 0x6f, 0xf6, 0xd0, 0x30,
								0x01,
							},
							{
								0x02, 0xcf, 0x02, 0x3a, 0xdb, 0x0f, 0xeb, 0x74,
								0xb4, 0x3d, 0x4d, 0x7d, 0xbd, 0xf4, 0xac, 0xbc,
								0xdf, 0x99, 0xf9, 0x9b, 0x0c, 0xda, 0x64, 0x66,
								0x5c, 0xe0, 0x45, 0x76, 0x18, 0xd9, 0xbc, 0xe6,
								0x95,
							},
						},
					},
				},
			},
			chain.MustAddressFromBech32("rs1qfvgr7evz60yrvavlwmhhgs3sh6rg5qdtslzny2"),
			2000000000,
			0,
			"",
		},
		{
			"invalid p2pkh",
			&chain.Transaction{
				Inputs: []*chain.Input{
					{
						Prevout: &chain.Outpoint{
							Hash: []byte{
								0x2b, 0xe0, 0x3e, 0x21, 0x2d, 0x32, 0xf6, 0xe5,
								0xec, 0x07, 0x3c, 0x0b, 0x87, 0x4d, 0xbe, 0xa1,
								0x65, 0x4e, 0xf5, 0x45, 0x53, 0x4e, 0x3a, 0x12,
								0x67, 0x8b, 0xeb, 0x5b, 0x1d, 0xb0, 0xa0, 0x6b,
							},
							Index: 0,
						},
						Sequence: chain.DefaultSequence,
					},
				},
				Outputs: []*chain.Output{
					{
						Value:   0,
						Address: chain.MustAddressFromBech32("rs1qk6pglpxj9xxwhscqlg3yp797n9gne8j8rfuwsz"),
						Covenant: &chain.Covenant{
							Type: chain.CovenantOpen,
							Items: [][]byte{
								{
									0x4b, 0x5f, 0x40, 0x4f, 0x7e, 0x9c, 0xcf, 0xe0, 0xb4,
									0x7c, 0x32, 0xd4, 0x35, 0x17, 0x7b, 0xec, 0xa1, 0xed,
									0x3d, 0x8d, 0x8c, 0x7a, 0x3a, 0xa6, 0xd0, 0x80, 0xb6,
									0xaf, 0xcb, 0xe7, 0x21, 0x49,
								},
								make([]byte, 4),
								{
									0x78, 0x70, 0x6e, 0x6a, 0x73, 0x65, 0x67, 0x61, 0x65, 0x70,
								},
							},
						},
					},
					{
						Value:    1999996220,
						Address:  chain.MustAddressFromBech32("rs1q3dnzyz9kamtcej877a90jrcnh5jr3wm7zgzrw7"),
						Covenant: chain.EmptyCovenant,
					},
				},
				Witnesses: []*chain.Witness{
					{
						Items: [][]byte{
							make([]byte, 65),
							{
								0x02, 0xcf, 0x02, 0x3a, 0xdb, 0x0f, 0xeb, 0x74,
								0xb4, 0x3d, 0x4d, 0x7d, 0xbd, 0xf4, 0xac, 0xbc,
								0xdf, 0x99, 0xf9, 0x9b, 0x0c, 0xda, 0x64, 0x66,
								0x5c, 0xe0, 0x45, 0x76, 0x18, 0xd9, 0xbc, 0xe6,
								0x95,
							},
						},
					},
				},
			},
			chain.MustAddressFromBech32("rs1qfvgr7evz60yrvavlwmhhgs3sh6rg5qdtslzny2"),
			2000000000,
			0,
			"invalid hash type",
		},
		{
			"valid hashlock p2sh",
			&chain.Transaction{
				Inputs: []*chain.Input{
					{
						Prevout: &chain.Outpoint{
							Hash:  randHash(32),
							Index: 0,
						},
						Sequence: chain.DefaultSequence,
					},
				},
				Outputs: []*chain.Output{
					{
						Value:    1000000,
						Address:  chain.NewAddressFromHash(randHash(20)),
						Covenant: chain.EmptyCovenant,
					},
				},
				LockTime: 0,
				Witnesses: []*chain.Witness{
					{
						Items: [][]byte{
							preimage,
							hashLock,
						},
					},
				},
			},
			chain.NewAddressFromHash(sha3256(hashLock)),
			1000000,
			0,
			"",
		},
		{
			"invalid hashlock p2sh",
			&chain.Transaction{
				Inputs: []*chain.Input{
					{
						Prevout: &chain.Outpoint{
							Hash:  randHash(32),
							Index: 0,
						},
						Sequence: chain.DefaultSequence,
					},
				},
				Outputs: []*chain.Output{
					{
						Value:    1000000,
						Address:  chain.NewAddressFromHash(randHash(20)),
						Covenant: chain.EmptyCovenant,
					},
				},
				LockTime: 0,
				Witnesses: []*chain.Witness{
					{
						Items: [][]byte{
							[]byte("not the preimage"),
							hashLock,
						},
					},
				},
			},
			chain.NewAddressFromHash(sha3256(hashLock)),
			1000000,
			0,
			"false stack entry",
		},
		// taken from the listing for "memology101"
		{
			"valid HIP1 locking script p2sh",
			&chain.Transaction{
				LockTime: 1623493111,
				Inputs: []*chain.Input{
					{
						Prevout: &chain.Outpoint{
							Hash: []byte{
								0x87, 0x0c, 0x15, 0x9d, 0x6c, 0xad, 0x10, 0xa8,
								0x3d, 0x98, 0xf3, 0x1c, 0xa9, 0xa0, 0xf8, 0x97,
								0x8c, 0xed, 0x93, 0x48, 0x02, 0x7e, 0x1e, 0x58,
								0xdd, 0xdd, 0x9f, 0x95, 0xfe, 0xbd, 0xed, 0x27,
							},
							Index: 0,
						},
						Sequence: chain.DefaultSequence,
					},
				},
				Outputs: []*chain.Output{
					{
						Address: &chain.Address{},
						Covenant: &chain.Covenant{
							Type: chain.CovenantTransfer,
						},
					},
					{
						Value:    15000000000,
						Address:  chain.MustAddressFromBech32("hs1qjgey4s8keruj2ckkzgwttyk9c5m5r3fp4szqkj"),
						Covenant: chain.EmptyCovenant,
					},
				},
				Witnesses: []*chain.Witness{
					{
						Items: [][]byte{
							{
								0xa1, 0x28, 0x2d, 0xf4, 0xf6, 0xc7, 0x72, 0x8d,
								0x02, 0x71, 0x5d, 0x41, 0xf6, 0x17, 0x0a, 0xa3,
								0xd7, 0xd6, 0x2a, 0x34, 0xe9, 0xea, 0xf2, 0x38,
								0x29, 0xaf, 0x13, 0x96, 0x83, 0x5e, 0xab, 0xb5,
								0x67, 0x31, 0x05, 0x36, 0xba, 0x06, 0x1e, 0xbe,
								0xd0, 0x8a, 0xa3, 0x38, 0xdd, 0x41, 0xc0, 0x9d,
								0x95, 0x05, 0x84, 0xf3, 0x92, 0x27, 0x00, 0xf3,
								0x20, 0xfd, 0x45, 0x50, 0xa4, 0x76, 0x8a, 0xaa,
								0x84,
							},
							hip1Lock,
						},
					},
				},
			},
			chain.MustAddressFromBech32("hs1q6tvy7k7l88v5un9vwzgvhflgnewj4c0r2kn3qfnwpmsf0gk5sxwsya079d"),
			0,
			0,
			"",
		},
		// same as above, but with the last byte in the signature changed
		{
			"invalid HIP1 locking script p2sh",
			&chain.Transaction{
				LockTime: 1623493111,
				Inputs: []*chain.Input{
					{
						Prevout: &chain.Outpoint{
							Hash: []byte{
								0x87, 0x0c, 0x15, 0x9d, 0x6c, 0xad, 0x10, 0xa8,
								0x3d, 0x98, 0xf3, 0x1c, 0xa9, 0xa0, 0xf8, 0x97,
								0x8c, 0xed, 0x93, 0x48, 0x02, 0x7e, 0x1e, 0x58,
								0xdd, 0xdd, 0x9f, 0x95, 0xfe, 0xbd, 0xed, 0x27,
							},
							Index: 0,
						},
						Sequence: chain.DefaultSequence,
					},
				},
				Outputs: []*chain.Output{
					{
						Address: &chain.Address{},
						Covenant: &chain.Covenant{
							Type: chain.CovenantTransfer,
						},
					},
					{
						Value:    15000000000,
						Address:  chain.MustAddressFromBech32("hs1qjgey4s8keruj2ckkzgwttyk9c5m5r3fp4szqkj"),
						Covenant: chain.EmptyCovenant,
					},
				},
				Witnesses: []*chain.Witness{
					{
						Items: [][]byte{
							{
								0xa1, 0x28, 0x2d, 0xf4, 0xf6, 0xc7, 0x72, 0x8d,
								0x02, 0x71, 0x5d, 0x41, 0xf6, 0x17, 0x0a, 0xa3,
								0xd7, 0xd6, 0x2a, 0x34, 0xe9, 0xea, 0xf2, 0x38,
								0x29, 0xaf, 0x13, 0x96, 0x83, 0x5e, 0xab, 0xb5,
								0x67, 0x31, 0x05, 0x36, 0xba, 0x06, 0x1e, 0xbe,
								0xd0, 0x8a, 0xa3, 0x38, 0xdd, 0x41, 0xc0, 0x9d,
								0x95, 0x05, 0x84, 0xf3, 0x92, 0x27, 0x00, 0xf3,
								0x20, 0xfd, 0x45, 0x50, 0xa4, 0x76, 0x8a, 0xba,
								0x84,
							},
							hip1Lock,
						},
					},
				},
			},
			chain.MustAddressFromBech32("hs1q6tvy7k7l88v5un9vwzgvhflgnewj4c0r2kn3qfnwpmsf0gk5sxwsya079d"),
			0,
			0,
			"failed checksig",
		},
		{
			"spending HIP1 locking script to REVOKE",
			&chain.Transaction{
				Inputs: []*chain.Input{
					{
						Prevout: &chain.Outpoint{
							Hash: []byte{
								0xbd, 0x08, 0xe1, 0x13, 0x4c, 0x48, 0xcb, 0x57,
								0x84, 0x64, 0xae, 0x91, 0x0c, 0x1f, 0xcf, 0x27,
								0xb5, 0x37, 0xf6, 0xd1, 0x27, 0x3d, 0xcb, 0xaf,
								0x51, 0x77, 0xdb, 0x72, 0x67, 0x17, 0xe6, 0x02,
							},
							Index: 0,
						},
						Sequence: chain.DefaultSequence,
					},
				},
				Outputs: []*chain.Output{
					{
						Value:   4000000,
						Address: chain.MustAddressFromBech32("hs1qux0dj6kva5qmpawjldtz8nuqh5fg9a0ax4kume5kvku2rl39jlds08r8xw"),
						Covenant: &chain.Covenant{
							Type: chain.CovenantRevoke,
							Items: [][]byte{
								{
									0x62, 0xf4, 0xcc, 0x35, 0x02, 0x8b, 0x07, 0x66,
									0x0a, 0x14, 0x0f, 0xa5, 0xd8, 0xcc, 0xbe, 0x9f,
									0x39, 0x04, 0x21, 0x0a, 0xdd, 0xf5, 0xcf, 0x87,
									0xf1, 0xb4, 0xb6, 0x82, 0x26, 0xc0, 0xfa, 0xd3,
								},
								{
									0xcd, 0x11, 0x00, 0x00,
								},
							},
						},
					},
				},
				Witnesses: []*chain.Witness{
					{
						Items: [][]byte{
							{
								0xfc, 0x51, 0xcd, 0xec, 0x8c, 0xbf, 0xad, 0xac,
								0xf1, 0x88, 0x04, 0xe4, 0x57, 0x2d, 0x5d, 0x16,
								0xf5, 0x1f, 0x68, 0x01, 0x31, 0x66, 0xdc, 0x45,
								0xc9, 0xb0, 0x67, 0x77, 0x39, 0x92, 0x27, 0x7e,
								0x50, 0x24, 0x50, 0xa9, 0x35, 0x77, 0xb4, 0x44,
								0x44, 0xbe, 0x1e, 0xe2, 0x90, 0xb6, 0x7b, 0xac,
								0xbe, 0xf4, 0xf9, 0xe6, 0x0f, 0x41, 0x97, 0x96,
								0x0a, 0x4c, 0xa7, 0xdf, 0x8b, 0x04, 0x1d, 0xca,
								0x84,
							},
							{
								0xd0, 0x59, 0x87, 0x63, 0x21, 0x02, 0x97, 0x03,
								0x92, 0x49, 0xcd, 0x83, 0x9a, 0x28, 0xbd, 0x71,
								0x4c, 0xf2, 0x97, 0xa4, 0x3f, 0x08, 0x9a, 0xfc,
								0x0a, 0xb5, 0xb6, 0x6b, 0x91, 0x84, 0x38, 0x3a,
								0x65, 0xe2, 0xdb, 0x30, 0x55, 0x2c, 0xac, 0x67,
								0xd0, 0x5a, 0x87, 0x68,
							},
						},
					},
				},
			},
			chain.MustAddressFromBech32("hs1qux0dj6kva5qmpawjldtz8nuqh5fg9a0ax4kume5kvku2rl39jlds08r8xw"),
			4000000,
			0,
			"must have clean stack",
		},
		{
			"spending HIP1 locking script to RENEW",
			&chain.Transaction{
				Inputs: []*chain.Input{
					{
						Prevout: &chain.Outpoint{
							Hash: []byte{
								0x4f, 0x3d, 0xbd, 0xb7, 0x00, 0x67, 0x51, 0xd4,
								0x01, 0xea, 0xdc, 0x93, 0x6b, 0xc8, 0x71, 0x2f,
								0xde, 0xf5, 0x2e, 0xea, 0xc6, 0xac, 0x4e, 0x1b,
								0x33, 0xe2, 0x98, 0x5b, 0x00, 0x7f, 0xf4, 0xb0,
							},
							Index: 0,
						},
						Sequence: chain.DefaultSequence,
					},
				},
				Outputs: []*chain.Output{
					{
						Value:   4000000,
						Address: chain.MustAddressFromBech32("hs1q4ue6mtpx27qmf4qcrge9uscd63jnw58sfqc49rxamvp6xglxw5fs8rxn83"),
						Covenant: &chain.Covenant{
							Type: chain.CovenantRenew,
							Items: [][]byte{
								{
									0xbf, 0x18, 0x63, 0xce, 0xe0, 0x65, 0x6e, 0x3c,
									0x25, 0x84, 0xe3, 0xc5, 0xc3, 0x92, 0xdc, 0xac,
									0x3e, 0x89, 0x1e, 0x73, 0x05, 0xd1, 0xd4, 0x22,
									0x3b, 0x21, 0x51, 0x1a, 0xaa, 0x95, 0x4f, 0x7c,
								},
								{
									0x1d, 0x12, 0x00, 0x00,
								},
								{
									0x14, 0x53, 0x51, 0x07, 0xe6, 0xcd, 0x3e, 0xf6,
									0xcf, 0xd4, 0xc7, 0xcf, 0x5a, 0xa2, 0xb5, 0x9b,
									0x7d, 0xcf, 0x03, 0xbc, 0xf2, 0x65, 0xe3, 0x34,
									0x0f, 0xfd, 0x29, 0x78, 0xd4, 0x72, 0x3d, 0x7a,
								},
							},
						},
					},
				},
				Witnesses: []*chain.Witness{
					{
						Items: [][]byte{
							{
								0xd8, 0x82, 0x3d, 0x7e, 0x40, 0x56, 0xec, 0x34, 0xb4,
								0xd5, 0x42, 0xa2, 0x61, 0xcb, 0x9a, 0x7b, 0x6c, 0xf5,
								0xd6, 0xcb, 0x11, 0x92, 0x9f, 0x69, 0xcb, 0xac, 0x7c,
								0x20, 0x3e, 0x57, 0x65, 0xa0, 0x65, 0x0f, 0x5e, 0xa4,
								0xa4, 0xbc, 0xa9, 0xa9, 0x3b, 0xd3, 0x1b, 0x3c, 0x73,
								0x37, 0x02, 0x46, 0xd1, 0x71, 0xa7, 0xe8, 0x02, 0x0a,
								0x71, 0xf1, 0xa8, 0x8f, 0x0c, 0x86, 0xd4, 0xd7, 0xf9,
								0xd2, 0x84,
							},
							{
								0xd0, 0x59, 0x87, 0x63, 0x21, 0x03, 0x75, 0x95, 0xaf,
								0xda, 0xb4, 0x9f, 0x61, 0xbc, 0xc3, 0xeb, 0x2c, 0xb3,
								0x4a, 0x0f, 0x1a, 0xad, 0x89, 0x6a, 0x6c, 0xac, 0x69,
								0xf2, 0xf6, 0xa6, 0xd3, 0xf0, 0xd9, 0x24, 0x9c, 0x56,
								0x33, 0xb5, 0xac, 0x67, 0xd0, 0x5a, 0x87, 0x68,
							},
						},
					},
				},
			},
			chain.MustAddressFromBech32("hs1q4ue6mtpx27qmf4qcrge9uscd63jnw58sfqc49rxamvp6xglxw5fs8rxn83"),
			4000000,
			0,
			"must have clean stack",
		},
		{
			"spending HIP1 locking script to UPDATE",
			&chain.Transaction{
				Inputs: []*chain.Input{
					{
						Prevout: &chain.Outpoint{
							Hash: []byte{
								0x9f, 0x7c, 0xd5, 0x74, 0x53, 0xaf, 0x2a, 0xdb,
								0xb5, 0xa5, 0xe0, 0xdf, 0xea, 0xa5, 0xd2, 0x85,
								0xec, 0xa0, 0xa2, 0x8a, 0x26, 0x30, 0xab, 0x33,
								0xf0, 0xe7, 0x16, 0xc2, 0xa8, 0xa6, 0x68, 0xa6,
							},
							Index: 0,
						},
					},
				},
				Outputs: []*chain.Output{
					{
						Value:   4000000,
						Address: chain.MustAddressFromBech32("hs1qpgewl4aq2rezc55pdvqquzzy8nk4m6k03tcu6yvzp3lpk4hvamps7nmheg"),
						Covenant: &chain.Covenant{
							Type: chain.CovenantUpdate,
							Items: [][]byte{
								{
									0xff, 0xb0, 0xc1, 0xa1, 0xc4, 0x68, 0x1b,
									0xab, 0x1a, 0x36, 0xc1, 0x69, 0x71, 0x82,
									0x3d, 0x20, 0x4e, 0xac, 0x7d, 0xa7, 0xca,
									0x57, 0xff, 0xfc, 0xb4, 0x8b, 0x7a, 0x56,
									0x49, 0x26, 0x99, 0x56,
								},
								{
									0x6d, 0x12, 0x00, 0x00,
								},
								{
									0x00, 0x00,
								},
							},
						},
					},
				},
				Witnesses: []*chain.Witness{
					{
						Items: [][]byte{
							{
								0x30, 0xf9, 0x16, 0xd7, 0x19, 0x3b, 0xfe, 0xd6,
								0x12, 0xab, 0xf5, 0x97, 0xa9, 0x83, 0x56, 0x18,
								0x41, 0x74, 0x2f, 0x55, 0x04, 0xd9, 0x94, 0x8a,
								0x8a, 0x7a, 0x46, 0xb3, 0x4a, 0x02, 0xde, 0x02,
								0x72, 0x27, 0x10, 0xeb, 0x57, 0xc0, 0x54, 0x38,
								0xe3, 0xf4, 0x07, 0x64, 0x4a, 0xd3, 0xe4, 0x47,
								0xc5, 0xb9, 0x16, 0x8f, 0xcb, 0x4a, 0x98, 0x4c,
								0x67, 0x55, 0xf3, 0x53, 0xea, 0x9a, 0x7b, 0x77,
								0x84,
							},
							{
								0xd0, 0x59, 0x87, 0x63, 0x21, 0x02, 0x07, 0x6b,
								0x9c, 0x8f, 0x01, 0x6d, 0xf1, 0xc4, 0xec, 0xac,
								0x50, 0xe3, 0xae, 0xc5, 0x6e, 0x06, 0xe1, 0x4b,
								0x6e, 0x99, 0xaf, 0xba, 0x0c, 0x0a, 0x2d, 0xae,
								0x6c, 0x70, 0x92, 0x04, 0xfe, 0xc3, 0xac, 0x67,
								0xd0, 0x5a, 0x87, 0x68,
							},
						},
					},
				},
			},
			chain.MustAddressFromBech32("hs1qpgewl4aq2rezc55pdvqquzzy8nk4m6k03tcu6yvzp3lpk4hvamps7nmheg"),
			4000000,
			0,
			"must have clean stack",
		},
		{
			"spending HIP1 locking script to TRANSFER (input 0)",
			hip1ValidSpend,
			chain.MustAddressFromBech32("hs1qq6z6dvr0rra38h0jtpjk20vkpx4avl0qttg705ktgx337y9qwmqsn68h23"),
			4000000,
			0,
			"",
		},
		{
			"spending HIP1 locking script to TRANSFER (input 1)",
			hip1ValidSpend,
			chain.MustAddressFromBech32("hs1qy0jkr4ha8d44ltaz3rknl5v8s0203jd2w2n4xl"),
			1000000000,
			1,
			"",
		},
	}

	for i, tt := range tests {
		t.Run(fmt.Sprintf("%d-%s", i, tt.name), func(t *testing.T) {
			err := EngineStandardVerify(
				tt.tx,
				tt.idx,
				tt.inputAddress,
				tt.inputAmount,
			)
			if tt.err == "" {
				require.NoError(t, err)
			} else {
				require.Error(t, err)
				require.Contains(t, err.Error(), tt.err)
			}
		})
	}
}
