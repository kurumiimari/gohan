package txscript

import (
	"crypto/rand"
	"fmt"
	"github.com/btcsuite/btcd/btcec"
	"github.com/kurumiimari/gohan/bio"
	"github.com/kurumiimari/gohan/chain"
	"github.com/stretchr/testify/require"
	"testing"
)

func TestWitnessSignatures(t *testing.T) {
	t.Parallel()

	p2pkhPriv, _ := btcec.PrivKeyFromBytes(
		btcec.S256(),
		bio.MustDecodeHex("2b2de9666244139e4902fc3f2636e65a4df89dba23fe46148037f0c839142be8"),
	)

	hip1Priv, _ := btcec.PrivKeyFromBytes(
		btcec.S256(),
		bio.MustDecodeHex("15fc9484e00440b66dd097231c63d6598ccb95e0942be16fa49d14cfed1f1448"),
	)

	tests := []struct {
		name       string
		tx         *chain.Transaction
		privateKey *btcec.PrivateKey
		amt        uint64
		sigFunc    func(tx *chain.Transaction, privKey *btcec.PrivateKey, amt uint64) (*chain.Witness, error)
		witItems   [][]byte
	}{
		{
			"valid p2pkh",
			&chain.Transaction{
				Inputs: []*chain.Input{
					{
						Prevout: &chain.Outpoint{
							Hash: []byte{
								0x2b, 0xe0, 0x3e, 0x21, 0x2d, 0x32, 0xf6, 0xe5,
								0xec, 0x07, 0x3c, 0x0b, 0x87, 0x4d, 0xbe, 0xa1,
								0x65, 0x4e, 0xf5, 0x45, 0x53, 0x4e, 0x3a, 0x12,
								0x67, 0x8b, 0xeb, 0x5b, 0x1d, 0xb0, 0xa0, 0x6b,
							},
							Index: 0,
						},
						Sequence: chain.DefaultSequence,
					},
				},
				Outputs: []*chain.Output{
					{
						Value:   0,
						Address: chain.MustAddressFromBech32("rs1qk6pglpxj9xxwhscqlg3yp797n9gne8j8rfuwsz"),
						Covenant: &chain.Covenant{
							Type: chain.CovenantOpen,
							Items: [][]byte{
								{
									0x4b, 0x5f, 0x40, 0x4f, 0x7e, 0x9c, 0xcf, 0xe0, 0xb4,
									0x7c, 0x32, 0xd4, 0x35, 0x17, 0x7b, 0xec, 0xa1, 0xed,
									0x3d, 0x8d, 0x8c, 0x7a, 0x3a, 0xa6, 0xd0, 0x80, 0xb6,
									0xaf, 0xcb, 0xe7, 0x21, 0x49,
								},
								make([]byte, 4),
								{
									0x78, 0x70, 0x6e, 0x6a, 0x73, 0x65, 0x67, 0x61, 0x65, 0x70,
								},
							},
						},
					},
					{
						Value:    1999996220,
						Address:  chain.MustAddressFromBech32("rs1q3dnzyz9kamtcej877a90jrcnh5jr3wm7zgzrw7"),
						Covenant: chain.EmptyCovenant,
					},
				},
			},
			p2pkhPriv,
			2000000000,
			func(tx *chain.Transaction, privKey *btcec.PrivateKey, amt uint64) (*chain.Witness, error) {
				return P2PKHWitnessSignature(tx, 0, amt, privKey)
			},
			[][]byte{
				{
					0x08, 0x98, 0xb4, 0xe5, 0xcb, 0xac, 0x14, 0x0d,
					0x65, 0xae, 0xe2, 0xba, 0x7c, 0x91, 0x14, 0x5b,
					0x05, 0xcd, 0xf5, 0x10, 0x7a, 0x5a, 0xff, 0x5b,
					0xc9, 0x0d, 0x27, 0x12, 0x49, 0x93, 0x0a, 0x67,
					0x4f, 0xca, 0x3f, 0x52, 0x06, 0x64, 0xce, 0x25,
					0x8a, 0x56, 0xc3, 0x8b, 0xe4, 0xb3, 0x7f, 0x8e,
					0xa5, 0xdb, 0x9b, 0x36, 0x13, 0xad, 0x42, 0x72,
					0x8d, 0xf3, 0xd5, 0x6d, 0x6f, 0xf6, 0xd0, 0x30,
					0x01,
				},
				{
					0x02, 0xcf, 0x02, 0x3a, 0xdb, 0x0f, 0xeb, 0x74,
					0xb4, 0x3d, 0x4d, 0x7d, 0xbd, 0xf4, 0xac, 0xbc,
					0xdf, 0x99, 0xf9, 0x9b, 0x0c, 0xda, 0x64, 0x66,
					0x5c, 0xe0, 0x45, 0x76, 0x18, 0xd9, 0xbc, 0xe6,
					0x95,
				},
			},
		},
		{
			"valid hip1 locking script p2sh",
			&chain.Transaction{
				Inputs: []*chain.Input{
					{
						Prevout: &chain.Outpoint{
							Hash: []byte{
								0x05, 0x86, 0xbd, 0x4f, 0x0f, 0x68, 0x46, 0x05,
								0xce, 0x54, 0xf8, 0x65, 0x9e, 0xb9, 0xe1, 0x4c,
								0x98, 0x93, 0x3b, 0x62, 0xdb, 0xf7, 0x4c, 0x45,
								0xc0, 0x20, 0x40, 0x97, 0x9f, 0x64, 0xbf, 0x34,
							},
							Index: 0,
						},
						Sequence: chain.DefaultSequence,
					},
				},
				Outputs: []*chain.Output{
					{
						Address: &chain.Address{},
						Covenant: &chain.Covenant{
							Type: chain.CovenantTransfer,
						},
					},
					{
						Value:    10000000,
						Address:  chain.MustAddressFromBech32("rs1qk0czcgu8rsluazhskg32j5jyeshvxaak6d6pt6"),
						Covenant: chain.EmptyCovenant,
					},
				},
			},
			hip1Priv,
			4000000,
			func(tx *chain.Transaction, privKey *btcec.PrivateKey, amt uint64) (*chain.Witness, error) {
				return HIP1PresignWitnessSignature(tx, 0, amt, privKey)
			},
			[][]byte{
				{
					0xe7, 0xa0, 0x2d, 0x33, 0xf2, 0xcb, 0xd6, 0xd5,
					0x67, 0x22, 0xb0, 0x2e, 0xe8, 0xd1, 0x59, 0x21,
					0x9d, 0xd7, 0xa3, 0x7a, 0x79, 0x92, 0xd6, 0xe6,
					0xf6, 0xd9, 0x1b, 0x2e, 0x77, 0x5e, 0x3a, 0xc5,
					0x7a, 0x30, 0x8b, 0x5e, 0xca, 0xe5, 0x9e, 0x73,
					0x71, 0x9a, 0x5a, 0x64, 0x3a, 0x7b, 0x88, 0xbb,
					0x59, 0x3d, 0x5d, 0xf3, 0xec, 0x59, 0x54, 0xa5,
					0xe7, 0x6f, 0x74, 0x64, 0x28, 0xb6, 0xb0, 0x13,
					0x84,
				},
				{
					0xd0, 0x59, 0x87, 0x63, 0x21, 0x03, 0x53, 0xeb,
					0xb5, 0x35, 0xf3, 0x30, 0xf1, 0xf6, 0x1e, 0x81,
					0x92, 0x75, 0x1c, 0xa9, 0xda, 0x3c, 0x84, 0x94,
					0xbe, 0x79, 0x98, 0x59, 0x1b, 0xc5, 0xe9, 0xbd,
					0x8b, 0x65, 0x8b, 0xb9, 0x22, 0x98, 0xac, 0x67,
					0xd0, 0x5a, 0x87, 0x68,
				},
			},
		},
	}
	for i, tt := range tests {
		t.Run(fmt.Sprintf("%d-%s", i, tt.name), func(t *testing.T) {
			wit, err := tt.sigFunc(
				tt.tx,
				tt.privateKey,
				tt.amt,
			)
			require.NoError(t, err)
			require.Equal(t, tt.witItems, wit.Items)
		})
	}
}

func randHash(size int) []byte {
	b := make([]byte, size)
	_, err := rand.Read(b)
	if err != nil {
		panic(err)
	}
	return b
}
